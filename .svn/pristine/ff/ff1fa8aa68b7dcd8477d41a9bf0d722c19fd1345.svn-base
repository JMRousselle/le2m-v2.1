#! /usr/bin/env python
# -*- coding: utf-8 -*-

from PyQt4 import QtGui, QtCore
application = QtGui.QApplication([''])
from util import utilqtreactor
utilqtreactor.install()
translator = QtCore.QTranslator()
localelang = QtCore.QLocale.system().name()
translator.load(QtCore.QString("qt_") + localelang,
                QtCore.QLibraryInfo.location(
                    QtCore.QLibraryInfo.TranslationsPath))
application.installTranslator(translator)
import sys
import os
if sys.platform.startswith("win"):
    import locale
    if os.getenv('LANG') is None:
        lang, enc = locale.getdefaultlocale()
        os.environ['LANG'] = lang
import logging
import argparse
from configuration import configparam as params
params.setp_appdir(os.path.realpath(os.path.dirname(__file__)))
from util.utili18n import le2mtrans  # after appdir
from client import clt  # after appdir and le2mtrans


def main():
    parser = argparse.ArgumentParser()
    # automatic mode
    parser.add_argument(
        "-a", "--automatique", action="store_true",
        default=False,
        help=le2mtrans(u"Run the application in the automatic mode."))
    # simulation mode
    parser.add_argument(
        "-s", "--simulation", action="store_true",
        default=False,
        help=le2mtrans(u"Run the application in the simulation mode"))
    # server ip
    parser.add_argument(
        "-i", "--ip", action="store",
        default=params.getp("SERVIP"),
        help=le2mtrans(u"IP adress of the server"))
    # server port
    parser.add_argument(
        "-p", "--port", action="store", type=int,
        default=params.getp("SERVPORT"), help=le2mtrans(u"Server port"))

    args = parser.parse_args()
    params.setp("SERVIP", args.ip)
    params.setp("SERVPORT", args.port)

    # LOGGER  ------------------------------------------------------------------
    logger = logging.getLogger("le2m")
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter(params.getp("LOGGING_FORMATTER"),
                                  datefmt=params.getp("LOGGING_FORMATTER_DATE"))
    # file handler
    fichier_log = logging.FileHandler(
        os.path.join(params.getp("REMOTELOGDIR"), 'le2m.log'))
    fichier_log.setLevel(logging.INFO)  
    fichier_log.setFormatter(formatter)
    logger.addHandler(fichier_log)
    # console handler
    console_log = logging.StreamHandler()
    console_log.setLevel(logging.DEBUG)
    console_log.setFormatter(formatter)
    logger.addHandler(console_log)

    # first log
    logger.info(30 * "~")
    logger.info(u"Logger LE2M created")
    
    # start remote -------------------------------------------------------------
    client = clt.Client(args.automatique, args.simulation)
    client.start()


if __name__ == '__main__':
    main()
