#! /usr/bin/env python2.7
# coding: utf-8

import sys
import os
from PyQt4 import QtCore, QtGui
import random
import dewidget
from util.utiltools import get_parent_folder


class WDice(QtGui.QWidget):
    def __init__(self, speed=10, tries=1, automatique=False, parent=None,
                 autotime=2000):
        """

        :param speed:
        :param tries: 0=infinity
        :return:
        """
        super(WDice, self).__init__(parent)
        self._automatique = automatique

        self.ui = dewidget.Ui_Form()
        self.ui.setupUi(self)

        self._speed = speed
        self._tries = tries
        self._currenttry = 0
        des = [QtGui.QPixmap(os.path.join(
            get_parent_folder(__file__), "img", "de_{}.png".format(i)))
               for i in range(1, 7)]
        self._des = dict(zip(range(1, 7), des))

        self._currentpix = self._des[1]
        self.ui.label_de.setPixmap(self._currentpix)

        self.ui.pushButton_start.clicked.connect(self._start)
        self.ui.pushButton_stop.clicked.connect(self._stop)

        if self._automatique:
            self._start()
            self._timerAuto = QtCore.QTimer()
            self._timerAuto.timeout.connect(self.ui.pushButton_stop.click)
            self._timerAuto.start(autotime)
        self.adjustSize()

    def _start(self):
        self._timer = QtCore.QTimer()
        self._timer.timeout.connect(self._changepix)
        self._timer.start(self._speed)

    def _changepix(self):
        self._currentpix = self._des[random.randint(1, 6)]
        self.ui.label_de.setPixmap(self._currentpix)

    def _stop(self):
        try:
            self._timerAuto.stop()
        except AttributeError:
            pass
        self._timer.stop()
        self._currenttry += 1
        if self._currenttry == self._tries:
            self.ui.pushButton_start.setEnabled(False)
            self.ui.pushButton_stop.setEnabled(False)

    def get_dicevalue(self):
        for k, v in self._des.iteritems():
            if v == self._currentpix:
                return k


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    wde = WDice(tries=0, automatique=True)
    wde.show()
    sys.exit(app.exec_())