# -*- coding: utf-8 -*-

import logging
from collections import OrderedDict
from twisted.internet import defer
from util import utiltools, utili18n
import TeamCommunicationParams as pms
import TeamCommunicationPart  # for sqlalchemy
from TeamCommunicationGui import DConfiguration, Wlist, DGains
from time import strftime
from PyQt4 import QtGui


logger = logging.getLogger("le2m.{}".format(__name__))


class Serveur(object):
    def __init__(self, le2mserv):
        self._le2mserv = le2mserv

        # creation of the menu (will be placed in the "part" menu on the
        # server screen
        actions = OrderedDict()
        actions[u"Configurer"] = self._configure
        actions[u"Afficher les paramètres"] = \
            lambda _: self._le2mserv.gestionnaire_graphique. \
            display_information2(
                utiltools.get_module_info(pms), u"Paramètres")
        actions[u"Démarrer"] = lambda _: self._demarrer()
        actions[u"Questions supplémentaires"] = \
            lambda _: self._start_additionnalquestions()
        actions[u"Afficher les gains"] = self._display_payoffs
        self._le2mserv.gestionnaire_graphique.add_topartmenu(
            u"Team Communication", actions)

        # ajout d'onglets
        self._onglet_looks = Wlist()
        self._onglet_essais = Wlist()
        self._onglet_messages = Wlist()
        self._le2mserv.gestionnaire_graphique.screen.ui.onglets.addTab(
            self._onglet_looks, u"Ouvertures grilles")
        self._le2mserv.gestionnaire_graphique.screen.ui.onglets.addTab(
            self._onglet_essais, u"Essais")
        self._le2mserv.gestionnaire_graphique.screen.ui.onglets.addTab(
            self._onglet_messages, u"Messages")

        self._currentsequence = -1
        self._currentsequence_groups = {}

    @property
    def onglet_looks(self):
        return self._onglet_looks

    @property
    def onglet_essais(self):
        return self._onglet_essais

    @property
    def onglet_messages(self):
        return self._onglet_messages

    def _configure(self):
        """
        To make changes in the parameters
        :return:
        """
        dconfig = DConfiguration(self._le2mserv.gestionnaire_graphique.screen)
        if dconfig.exec_():
            pms.TEMPS_PARTIE, pms.TREATMENT, pms.GRILLES = dconfig.get_config()
            self._le2mserv.gestionnaire_graphique.infoserv(
                [u"Temps partie: {}".format(pms.TEMPS_PARTIE),
                 u"Traitement: {}".format(pms.treatmentcodes[pms.TREATMENT]),
                 u"Grilles: {}".format(len(pms.GRILLES))])

    @defer.inlineCallbacks
    def _demarrer(self):
        """
        Start the part
        :return:
        """
        if (divmod(len(self._le2mserv.gestionnaire_joueurs.get_players()),
                    pms.TAILLE_GROUPES**2)[1] != 0):
            self._le2mserv.gestionnaire_graphique.display_error(
                u"Il faut un nombre de joueurs multiple de {}".format(
                    pms.TAILLE_GROUPES**2))
            return

        if not pms.GRILLES:
            self._le2mserv.gestionnaire_graphique.display_error(
                u"Il faut charger les grilles")
            return

        confirmation = self._le2mserv.gestionnaire_graphique.\
            question(u"Démarrer TeamCommunication?")
        if not confirmation:
            return

        if not self._le2mserv.gestionnaire_experience.has_part(
                "TeamCommunication"):  # init part
            yield (self._le2mserv.gestionnaire_experience.init_part(
                "TeamCommunication", "PartieTC", "RemoteTC", pms))
            self._tous = self._le2mserv.gestionnaire_joueurs.get_players(
                'TeamCommunication')
        else:  # uniquement affichage
            self._le2mserv.gestionnaire_graphique.infoserv(None)
            self._le2mserv.gestionnaire_graphique.infoserv(
                "TeamCommunication".upper(), fg="white", bg="blue")
            self._le2mserv.gestionnaire_graphique.infoclt(None)
            self._le2mserv.gestionnaire_graphique.infoclt(
                "TeamCommunication".upper(), fg="white", bg="blue")
            self._le2mserv.gestionnaire_graphique.infoserv(
                utili18n.le2mtrans(u"Start time: {st}").format(
                    st=strftime("%H:%M:%S")))

        self._currentsequence += 1
        self._le2mserv.gestionnaire_graphique.infoserv(u"Sequence {}".format(
            self._currentsequence))
        self.onglet_looks.clear()
        self.onglet_essais.clear()
        self.onglet_messages.clear()

        # formation des groupes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        self._former_groupes()
    
        # pour configure les clients et les remotes ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        yield (self._le2mserv.gestionnaire_experience.run_step(
            u"Configure", self._tous, "configure", self, self._currentsequence))
        for j in self._tous:
            j.othergroupmembers = [
                k.get_part("TeamCommunication") for k in
                self._le2mserv.gestionnaire_groupes.get_autres_membres_groupe(
                    j.joueur)]

        # DEBUT DES RÉPÉTITIONS ================================================
        for period in xrange(1 if pms.NOMBRE_PERIODES else 0,
                             pms.NOMBRE_PERIODES + 1):

            if self._le2mserv.gestionnaire_experience.stop_repetitions:
                break

            # initialisation période ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            self._le2mserv.gestionnaire_graphique.infoserv(
                [None, u"Période {}".format(period)])
            self._le2mserv.gestionnaire_graphique.infoclt(
                [None, u"Période {}".format(period)], fg="white", bg="gray")
            yield (self._le2mserv.gestionnaire_experience.run_func(
                self._tous, "newperiod", period))
            
            # décision ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            yield (self._le2mserv.gestionnaire_experience.run_step(
                u"Décision", self._tous, "display_decision"))

            # calcul nb bonne rep dans chaque groupe
            self._le2mserv.gestionnaire_graphique.infoserv(u"Good answers")
            for g, m in self._le2mserv.gestionnaire_groupes.get_groupes(
                    "TeamCommunication").iteritems():
                nbbonnesrep = sum([j.currentperiod.TC_goodanswers for j in m])
                for j in m:
                    j.currentperiod.TC_goodanswers_group = nbbonnesrep
                self._le2mserv.gestionnaire_graphique.infoserv(
                    u"G{}: {}".format(g.split("_")[2], nbbonnesrep))

            # calcul des gains de la période ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            self._le2mserv.gestionnaire_experience.compute_periodpayoffs(
                "TeamCommunication")
        
            # affichage du récapitulatif ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            yield (self._le2mserv.gestionnaire_experience.run_step(
                u"Récapitulatif", self._tous, "display_summary"))
        
        # FIN DE LA PARTIE =====================================================
        self._le2mserv.gestionnaire_experience.finalize_part(
            "TeamCommunication")

    def _display_payoffs(self):
        gains_txt = []
        gains, textes_finaux = {}, {}
        if self._currentsequence >= 0:
            sequence, ok = QtGui.QInputDialog.getInt(
                self._le2mserv.gestionnaire_graphique.screen, u"Choix séquence",
                u"Choisir la séquence", 0, 0, self._currentsequence, 1)
            for j in self._tous:
                gains[j.joueur] = j.sequences[sequence][0].TC_periodpayoff
                gains_txt.append(
                    [str(j.joueur), u"{}".format(gains[j.joueur])])
                textes_finaux[j.joueur] = j.sequences[sequence]["texte_final"]
        self._ecran_gains = DGains(self._le2mserv, gains_txt, textes_finaux, gains)
        self._ecran_gains.show()

    def _former_groupes(self):
        """
        Pour les séquences paires on forme des groupes aléatoires
        Pour les séquences impaires on forme des groupes dans lesquels aucun
        des joueurs n'a jamais interagi avec aucun des autres membres du
        groupe lors de la séquence précédente
        :return: None
        """
        if self._currentsequence % 2 == 0:  # sequence paire
            groups = utiltools.former_groupes(
                self._le2mserv.gestionnaire_joueurs.get_players(),
                pms.TAILLE_GROUPES, "{}_g_".format(
                    self._le2mserv.gestionnaire_groupes.nom_session))
            self._currentsequence_groups[self._currentsequence] = groups
            self._le2mserv.gestionnaire_groupes.set_groupes(groups)
        else:  # sequénces impaires: groupes totalement différent de seq prec.
            groupsnewtemp = []
            groupsold = \
                self._currentsequence_groups[self._currentsequence - 1].values()
            for i in range(divmod(
                    len(self._le2mserv.gestionnaire_joueurs.get_players()),
                    pms.TAILLE_GROUPES**2)[0]):
                groupsnewtemp.extend(
                    zip(*groupsold[i: i+pms.TAILLE_GROUPES]))
            groupsnew = {}
            for i in groupsnewtemp:
                groupsnew["{}_g_{}".format(
                    self._le2mserv.gestionnaire_groupes.nom_session,
                    utiltools.compteur_groupe)] = list(i)
                utiltools.compteur_groupe += 1
            self._currentsequence_groups[self._currentsequence] = groupsnew
            self._le2mserv.gestionnaire_groupes.set_groupes(groupsnew)
        self._le2mserv.gestionnaire_groupes.set_attributes()
        self._le2mserv.gestionnaire_graphique.infoserv(
            self._le2mserv.gestionnaire_groupes.get_groupes_string())

    @defer.inlineCallbacks
    def _start_additionnalquestions(self):
        if self._currentsequence == -1:
            QtGui.QMessageBox.critical(
                self._le2mserv.gestionnaire_graphique.screen,
                u"Attention",
                u"Ces questions doivent être lancées après la partie")
            return
        confirm = self._le2mserv.gestionnaire_graphique.question(
            u"Lancer les questions additionnelles?")
        if not confirm:
            return
        yield (self._le2mserv.gestionnaire_experience.run_step(
            u"Questions additionnelles", self._tous,
            "display_additionnalquestions"))